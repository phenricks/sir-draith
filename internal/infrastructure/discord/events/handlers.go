package events

import (
	"fmt"
	"log"
	"time"

	"sirdraith/internal/domain/repository"

	"github.com/bwmarrin/discordgo"
)

// ReadyHandler handles the Ready event
type ReadyHandler struct {
	session *discordgo.Session
}

func NewReadyHandler(s *discordgo.Session) *ReadyHandler {
	return &ReadyHandler{session: s}
}

func (h *ReadyHandler) Handle(s *discordgo.Session, i interface{}) error {
	log.Printf("Bot est√° pronto! Conectado como %s", s.State.User.Username)
	return h.session.UpdateGameStatus(0, "Protegendo o Reino")
}

// GuildCreateHandler handles the GuildCreate event
type GuildCreateHandler struct {
	session *discordgo.Session
}

func NewGuildCreateHandler(s *discordgo.Session) *GuildCreateHandler {
	return &GuildCreateHandler{session: s}
}

func (h *GuildCreateHandler) Handle(s *discordgo.Session, i interface{}) error {
	guild, ok := i.(*discordgo.GuildCreate)
	if !ok {
		return fmt.Errorf("evento inv√°lido para GuildCreate handler")
	}

	log.Printf("Bot adicionado ao servidor: %s", guild.Name)

	// Envia mensagem de boas-vindas no canal do sistema
	if guild.SystemChannelID != "" {
		embed := &discordgo.MessageEmbed{
			Title: "üó°Ô∏è Sir Draith - O Protetor do Reino",
			Description: fmt.Sprintf("Sauda√ß√µes, nobres membros do Reino **%s**!\n\n"+
				"Eu sou **Sir Draith**, um cavaleiro m√≠stico treinado nas artes da guerra e da magia, "+
				"designado para servir e proteger vosso reino digital. "+
				"Estou aqui para auxiliar em vossas aventuras e manter a ordem em vosso servidor.\n\n"+
				"**üõ°Ô∏è Meus Servi√ßos:**\n"+
				"‚Ä¢ Sistema de RPG com cria√ß√£o de personagens\n"+
				"‚Ä¢ Batalhas √©picas com sistema de cartas\n"+
				"‚Ä¢ Gerenciamento de campanhas e narrativas\n"+
				"‚Ä¢ Prote√ß√£o e modera√ß√£o do servidor\n\n"+
				"**üìú Comandos Principais:**\n"+
				"‚Ä¢ `!ajuda` - Lista todos os comandos dispon√≠veis\n"+
				"‚Ä¢ `!criar` - Inicia a cria√ß√£o de um personagem\n"+
				"‚Ä¢ `!info` - Mostra informa√ß√µes detalhadas sobre mim\n"+
				"‚Ä¢ `!config` - Configura as op√ß√µes do servidor (Admin)\n\n"+
				"Que vossa jornada neste reino seja repleta de aventuras e gl√≥rias! üè∞", guild.Name),
			Color: 0x2b2d31, // Cor tem√°tica medieval (cinza escuro)
			Thumbnail: &discordgo.MessageEmbedThumbnail{
				URL: s.State.User.AvatarURL(""),
			},
			Footer: &discordgo.MessageEmbedFooter{
				Text: "Sir Draith - Bot Medieval ‚Ä¢ Use !ajuda para mais informa√ß√µes",
			},
			Timestamp: time.Now().Format(time.RFC3339),
		}
		_, err := s.ChannelMessageSendEmbed(guild.SystemChannelID, embed)
		if err != nil {
			log.Printf("Erro ao enviar mensagem de boas-vindas: %v", err)
		}
	}

	return nil
}

// GuildDeleteHandler handles the GuildDelete event
type GuildDeleteHandler struct{}

func NewGuildDeleteHandler() *GuildDeleteHandler {
	return &GuildDeleteHandler{}
}

func (h *GuildDeleteHandler) Handle(s *discordgo.Session, i interface{}) error {
	guild, ok := i.(*discordgo.GuildDelete)
	if !ok {
		return fmt.Errorf("evento inv√°lido para GuildDelete handler")
	}

	log.Printf("Bot removido do servidor: %s", guild.ID)
	return nil
}

// GuildMemberAddHandler handles the GuildMemberAdd event
type GuildMemberAddHandler struct {
	guildConfigRepo repository.ConfigRepository
}

func NewGuildMemberAddHandler(repo repository.ConfigRepository) *GuildMemberAddHandler {
	return &GuildMemberAddHandler{
		guildConfigRepo: repo,
	}
}

func (h *GuildMemberAddHandler) Handle(s *discordgo.Session, i interface{}) error {
	member, ok := i.(*discordgo.GuildMemberAdd)
	if !ok {
		return fmt.Errorf("evento inv√°lido para GuildMemberAdd handler")
	}

	log.Printf("Novo membro entrou no servidor %s: %s#%s",
		member.GuildID, member.User.Username, member.User.Discriminator)

	// Busca a configura√ß√£o do servidor
	config, err := h.guildConfigRepo.GetGuildConfig(member.GuildID)
	if err != nil {
		log.Printf("Erro ao buscar configura√ß√£o do servidor: %v", err)
		return err
	}

	// Determina o canal de boas-vindas
	channelID := config.WelcomeChannel
	if channelID == "" {
		// Se n√£o houver canal configurado, tenta encontrar um apropriado
		guild, err := s.Guild(member.GuildID)
		if err != nil {
			return fmt.Errorf("erro ao buscar informa√ß√µes do servidor: %w", err)
		}

		// Tenta usar o canal de sistema primeiro
		channelID = guild.SystemChannelID
		if channelID == "" {
			// Procura um canal com "welcome", "bem-vindo" ou similar no nome
			channels, err := s.GuildChannels(member.GuildID)
			if err != nil {
				return fmt.Errorf("erro ao buscar canais do servidor: %w", err)
			}

			for _, ch := range channels {
				if ch.Type == discordgo.ChannelTypeGuildText &&
					(stringContainsAny(ch.Name, []string{"welcome", "bem-vindo", "boas-vindas"})) {
					channelID = ch.ID
					break
				}
			}
		}
	}

	if channelID != "" {
		guild, err := s.Guild(member.GuildID)
		if err != nil {
			return fmt.Errorf("erro ao buscar informa√ß√µes do servidor: %w", err)
		}

		embed := &discordgo.MessageEmbed{
			Title: "üéâ Bem-vindo(a) ao Reino!",
			Description: fmt.Sprintf("Sauda√ß√µes, nobre %s! Que vossa jornada neste reino seja repleta de aventuras e gl√≥rias!\n\n"+
				"üõ°Ô∏è **Dicas para come√ßar:**\n"+
				"‚Ä¢ Use `!help` para ver todos os comandos dispon√≠veis\n"+
				"‚Ä¢ Leia as regras do servidor para uma conviv√™ncia harmoniosa\n"+
				"‚Ä¢ Apresente-se aos outros membros do reino",
				member.User.Mention()),
			Color: 0x2ecc71, // Verde esmeralda
			Thumbnail: &discordgo.MessageEmbedThumbnail{
				URL: member.User.AvatarURL(""),
			},
			Fields: []*discordgo.MessageEmbedField{
				{
					Name:   "üé≠ Membro",
					Value:  fmt.Sprintf("%s#%s", member.User.Username, member.User.Discriminator),
					Inline: true,
				},
				{
					Name:   "üìÖ Entrada",
					Value:  time.Now().Format("02/01/2006 15:04"),
					Inline: true,
				},
			},
			Footer: &discordgo.MessageEmbedFooter{
				Text: fmt.Sprintf("Membro #%d", guild.MemberCount),
			},
			Timestamp: time.Now().Format(time.RFC3339),
		}

		_, err = s.ChannelMessageSendEmbed(channelID, embed)
		if err != nil {
			log.Printf("Erro ao enviar mensagem de boas-vindas: %v", err)
			return err
		}
	}

	return nil
}

// GuildMemberRemoveHandler handles the GuildMemberRemove event
type GuildMemberRemoveHandler struct {
	guildConfigRepo repository.ConfigRepository
}

func NewGuildMemberRemoveHandler(repo repository.ConfigRepository) *GuildMemberRemoveHandler {
	return &GuildMemberRemoveHandler{
		guildConfigRepo: repo,
	}
}

func (h *GuildMemberRemoveHandler) Handle(s *discordgo.Session, i interface{}) error {
	member, ok := i.(*discordgo.GuildMemberRemove)
	if !ok {
		return fmt.Errorf("evento inv√°lido para GuildMemberRemove handler")
	}

	log.Printf("Membro saiu do servidor %s: %s#%s",
		member.GuildID, member.User.Username, member.User.Discriminator)

	// Busca a configura√ß√£o do servidor
	config, err := h.guildConfigRepo.GetGuildConfig(member.GuildID)
	if err != nil {
		log.Printf("Erro ao buscar configura√ß√£o do servidor: %v", err)
		return err
	}

	// Determina o canal de despedida
	channelID := config.GoodbyeChannel
	if channelID == "" {
		// Se n√£o houver canal configurado, usa o canal do sistema
		guild, err := s.Guild(member.GuildID)
		if err != nil {
			return fmt.Errorf("erro ao buscar informa√ß√µes do servidor: %w", err)
		}
		channelID = guild.SystemChannelID
	}

	if channelID != "" {
		guild, err := s.Guild(member.GuildID)
		if err != nil {
			return fmt.Errorf("erro ao buscar informa√ß√µes do servidor: %w", err)
		}

		embed := &discordgo.MessageEmbed{
			Title: "üëã At√© logo, nobre aventureiro!",
			Description: fmt.Sprintf("O nobre %s partiu de nosso reino. Que sua jornada seja pr√≥spera por onde quer que v√°!",
				member.User.Username),
			Color: 0xe74c3c, // Vermelho
			Thumbnail: &discordgo.MessageEmbedThumbnail{
				URL: member.User.AvatarURL(""),
			},
			Fields: []*discordgo.MessageEmbedField{
				{
					Name:   "üé≠ Membro",
					Value:  fmt.Sprintf("%s#%s", member.User.Username, member.User.Discriminator),
					Inline: true,
				},
				{
					Name:   "üìÖ Sa√≠da",
					Value:  time.Now().Format("02/01/2006 15:04"),
					Inline: true,
				},
			},
			Footer: &discordgo.MessageEmbedFooter{
				Text: fmt.Sprintf("Membros restantes: %d", guild.MemberCount-1),
			},
			Timestamp: time.Now().Format(time.RFC3339),
		}

		_, err = s.ChannelMessageSendEmbed(channelID, embed)
		if err != nil {
			log.Printf("Erro ao enviar mensagem de despedida: %v", err)
			return err
		}
	}

	return nil
}
